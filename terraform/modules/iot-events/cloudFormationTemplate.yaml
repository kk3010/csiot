Parameters:
  RoleArn:
    Type: String
Resources:
  DoorLockInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "door_lock_input"
      InputDefinition:
        Attributes:
          - JsonPath: "open"
  MotionSensorInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "motion_sensor_input"
      InputDefinition:
        Attributes:
          - JsonPath: "open"
  TempSensorInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "temp_sensor_input"
      InputDefinition:
        Attributes:
          - JsonPath: "value"
  HumiditySensorInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "humidity_sensor_input"
      InputDefinition:
        Attributes:
          - JsonPath: "value"
  HeatingInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "heating_input"
      InputDefinition:
        Attributes:
          - JsonPath: "on"
  TempSeedInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "temp_seed_input"
      InputDefinition:
        Attributes:
          - JsonPath: "desiredTemperature"
          - JsonPath: "allowedError"
          - JsonPath: "anomalousDelta"
  HumiditySeedInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "humidity_seed_input"
      InputDefinition:
        Attributes:
          - JsonPath: "desiredHumidity"
          - JsonPath: "allowedError"
          - JsonPath: "anomalousDelta"
  TemperatureAlarmInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "temperature_alarm_input"
      InputDefinition:
        Attributes:
          - JsonPath: "on"
  HumidityAlarmInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "humidity_alarm_input"
      InputDefinition:
        Attributes:
          - JsonPath: "on" 
  BreakInAlarmInput:
    Type: "AWS::IoTEvents::Input"
    Properties:
      InputName: "breakIn_alarm_input"
      InputDefinition:
        Attributes:
          - JsonPath: "on"
  BreakInDetectorModel:
    Type: "AWS::IoTEvents::DetectorModel"
    DependsOn:
      - DoorLockInput
      - MotionSensorInput
      - BreakInAlarmInput
    Properties:
      DetectorModelName: breakIn_detector_model
      EvaluationMethod: BATCH
      RoleArn:
        Ref: RoleArn
      DetectorModelDefinition:
        InitialStateName: normal
        States:
          - StateName: normal
            OnEnter:
              Events:
                - Actions:
                  - IotEvents:
                      InputName: breakIn_alarm_input
                      Payload:
                        ContentExpression: '''{"on": false}'''
                        Type: JSON
                  Condition: "true"
                  EventName: disable_alarm
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
                - Actions: []
                  Condition: $input.motion_sensor_input.open && $input.door_lock_input.open
                  EventName: dangerous
                  NextState: alarm
          - StateName: alarm
            OnEnter:
              Events:
                - Actions:
                  - IotEvents:
                      InputName: breakIn_alarm_input
                      Payload:
                        ContentExpression: '''{"on": true}'''
                        Type: JSON
                  Condition: "true"
                  EventName: enable_alarm
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
                - Actions: []
                  Condition: "!($input.motion_sensor_input.open && $input.door_lock_input.open)"
                  EventName: no_danger
                  NextState: normal
  TemperatureDetectorModel:
    Type: "AWS::IoTEvents::DetectorModel"
    DependsOn:
      - TempSensorInput
      - TempSeedInput
      - TemperatureAlarmInput
    Properties:
      DetectorModelName: temperature_detector_model
      EvaluationMethod: BATCH
      RoleArn:
        Ref: RoleArn
      DetectorModelDefinition:
        InitialStateName: start
        States:
          - OnEnter:
              Events:
              - Actions:
                - IotTopicPublish:
                    MqttTopic: $aws/things/fan/shadow/update
                    Payload:
                      ContentExpression: "'{\"state\" : {\"desired\": {\"on\" : true }}}'"
                      Type: JSON
                Condition: 'true'
                EventName: enable_fan
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
              - Actions: []
                Condition: '$input.temp_sensor_input.value  <= $variable.desiredTemperature '
                EventName: cool_enough
                NextState: idle
              - Actions: []
                Condition: $input.temp_sensor_input.value > ($variable.desiredTemperature
                  + $variable.anomalousDelta)
                EventName: dangerously_hot
                NextState: alarm
            StateName: cooling
          - OnEnter:
              Events:
              - Actions:
                - IotTopicPublish:
                    MqttTopic: $aws/things/fan/shadow/update
                    Payload:
                      ContentExpression: '''{ "state": {"desired":{"on": false}}}'''
                      Type: JSON
                Condition: 'true'
                EventName: disable_fan
              - Actions:
                - IotTopicPublish:
                    MqttTopic: $aws/things/heating/shadow/update
                    Payload:
                      ContentExpression: '''{\"state\":{\"desired\":{\"on\":false}}}'''
                      Type: JSON
                Condition: 'true'
                EventName: disable_heating
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
              - Actions: []
                Condition: $input.temp_sensor_input.value > $variable.desiredTemperature
                  + $variable.allowedError
                EventName: too_hot
                NextState: cooling
              - Actions: []
                Condition: '($input.temp_sensor_input.value + $variable.allowedError) <
                  $variable.desiredTemperature '
                EventName: too_cold
                NextState: heating
            StateName: idle
          - OnEnter:
              Events:
              - Actions:
                - IotEvents:
                    InputName: temperature_alarm_input
                    Payload:
                      ContentExpression: '''{"on": true}'''
                      Type: JSON
                Condition: "true"
                EventName: enable_alarm
            OnExit:
              Events:
              - Actions:
                - IotEvents:
                    InputName: temperature_alarm_input
                    Payload:
                      ContentExpression: '''{"on": false}'''
                      Type: JSON
                Condition: "true"
                EventName: disable_alarm
            OnInput:
              Events: []
              TransitionEvents:
              - Actions: []
                Condition: $input.temp_sensor_input.value <= ($variable.desiredTemperature
                  + $variable.anomalousDelta)
                EventName: not_dangerous
                NextState: cooling
              - Actions: []
                Condition: $input.temp_sensor_input.value >= ($variable.desiredTemperature
                  - $variable.anomalousDelta)
                EventName: not_dangerous
                NextState: heating
            StateName: alarm
          - OnEnter:
              Events: []
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
              - Actions:
                - SetVariable:
                    Value: $input.temp_seed_input.desiredTemperature
                    VariableName: desiredTemperature
                - SetVariable:
                    Value: $input.temp_seed_input.allowedError
                    VariableName: allowedError
                - SetVariable:
                    Value: $input.temp_seed_input.anomalousDelta
                    VariableName: anomalousDelta
                Condition: $input.temp_seed_input.desiredTemperature > 0
                EventName: initialize
                NextState: idle
            StateName: start
          - OnEnter:
              Events:
              - Actions:
                - IotTopicPublish:
                    MqttTopic: $aws/things/heating/shadow/update
                    Payload:
                      ContentExpression: "'{\"state\":{\"desired\":{\"on\":true}}}'"
                      Type: JSON
                Condition: 'true'
                EventName: enable_heating
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
              - Actions: []
                Condition: '$input.temp_sensor_input.value  >= $variable.desiredTemperature '
                EventName: warm_enough
                NextState: idle
              - Actions: []
                Condition: $input.temp_sensor_input.value < ($variable.desiredTemperature
                  - $variable.anomalousDelta)
                EventName: dangerously_cold
                NextState: alarm
            StateName: heating
  HumidifierDetectorModel:
    Type: "AWS::IoTEvents::DetectorModel"
    DependsOn:
      - HumiditySensorInput
      - HumiditySeedInput
      - HeatingInput
      - HumidityAlarmInput
    Properties:
      DetectorModelDescription:
        Enables and disables a humidifier based on humidity
        sensor
      DetectorModelName: humidifier_detector_model
      EvaluationMethod: BATCH
      RoleArn:
        Ref: RoleArn
      DetectorModelDefinition:
        InitialStateName: start
        States:
          - OnEnter:
              Events:
                - Actions:
                    - IotTopicPublish:
                        MqttTopic: $aws/things/humidifier/shadow/update
                        Payload:
                          ContentExpression: '''{"state":{"desired":{"on":true}}}'''
                          Type: JSON
                  Condition: "true"
                  EventName: enable_humidifier
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
                - Actions: []
                  Condition: $input.humidity_sensor_input.value >= $variable.desiredHumidity
                  EventName: humid_enough
                  NextState: idle
                - Actions: []
                  Condition:
                    $input.humidity_sensor_input.value < ($variable.desiredHumidity
                    - $variable.anomalousDelta)
                  EventName: dangerously_dry
                  NextState: alarm
            StateName: moistening
          - OnEnter:
              Events:
              - Actions:
                - IotTopicPublish:
                    MqttTopic: $aws/things/humidifier/shadow/update
                    Payload:
                      ContentExpression: '''{"state":{"reported":{"on":false}}}'''
                      Type: JSON
                Condition: 'true'
                EventName: disable_humdifier
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
                - Actions: []
                  Condition:
                    "$input.humidity_sensor_input.value + $variable.allowedError
                    < $variable.desiredHumidity "
                  EventName: too_dry
                  NextState: moistening
                - Actions: []
                  Condition: $input.heating_input.on
                  EventName: too_humid
                  NextState: drying
            StateName: idle
          - OnEnter:
              Events:
              - Actions:
                - IotTopicPublish:
                    MqttTopic: $aws/things/heating/shadow/update
                    Payload:
                      ContentExpression: '''{"state":{"desired":{"on":true}}}'''
                      Type: JSON
                Condition: 'true'
                EventName: enable_heating
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
                - Actions: []
                  Condition: "!$input.heating_input.on"
                  EventName: dry_enough
                  NextState: idle
                - Actions: []
                  Condition:
                    $input.humidity_sensor_input.value > ($variable.desiredHumidity
                    + $variable.anomalousDelta)
                  EventName: dangerously_humid
                  NextState: alarm
            StateName: drying
          - OnEnter:
              Events: []
            OnExit:
              Events: []
            OnInput:
              Events: []
              TransitionEvents:
                - Actions:
                    - SetVariable:
                        Value: $input.humidity_seed_input.desiredHumidity
                        VariableName: desiredHumidity
                    - SetVariable:
                        Value: $input.humidity_seed_input.allowedError
                        VariableName: allowedError
                    - SetVariable:
                        Value: $input.humidity_seed_input.anomalousDelta
                        VariableName: anomalousDelta
                  Condition: "$input.humidity_seed_input.desiredHumidity >  0 "
                  EventName: initialize
                  NextState: idle
            StateName: start
          - OnEnter:
              Events:
              - Actions:
                - IotEvents:
                    InputName: humidity_alarm_input
                    Payload:
                      ContentExpression: '''{"on": true}'''
                      Type: JSON
                Condition: 'true'
                EventName: enable_alarm
            OnExit:
              Events:
              - Actions:
                - IotEvents:
                    InputName: humidity_alarm_input
                    Payload:
                      ContentExpression: '''{"on": false}'''
                      Type: JSON
                Condition: 'true'
                EventName: disable_alarm
            OnInput:
              Events: []
              TransitionEvents:
                - Actions: []
                  Condition:
                    $input.humidity_sensor_input.value >= ($variable.desiredHumidity
                    - $variable.anomalousDelta)
                  EventName: not_dangerous
                  NextState: moistening
                - Actions: []
                  Condition:
                    $input.humidity_sensor_input.value >= ($variable.desiredHumidity
                    + $variable.anomalousDelta)
                  EventName: not_dangerous
                  NextState: drying
            StateName: alarm
  AlarmDetectorModel:
    Type: "AWS::IoTEvents::DetectorModel"
    DependsOn:
      - BreakInAlarmInput
      - TemperatureAlarmInput
      - HumidityAlarmInput
    Properties:
      DetectorModelDescription: Turns on and off the alarm lamp when something is strange.
      DetectorModelName: alarm_detector_model
      EvaluationMethod: BATCH
      RoleArn:
        Ref: RoleArn
      DetectorModelDefinition:
        InitialStateName: normal
        States:
        - OnEnter:
            Events:
            - Actions:
              - IotTopicPublish:
                  MqttTopic: $aws/things/alarm/shadow/update
              Condition: 'true'
              EventName: disable_alarm
          OnExit:
            Events: []
          OnInput:
            Events: []
            TransitionEvents:
            - Actions: []
              Condition: "$input.breakIn_alarm_input.on || $input.humidity_alarm_input.on\
                  \ ||\n$input.temperature_alarm_input.on"
              EventName: danger
              NextState: alarm
          StateName: normal
        - OnEnter:
            Events:
            - Actions:
              - IotTopicPublish:
                  MqttTopic: $aws/things/alarm/shadow/update
                  Payload:
                    ContentExpression: '''{"state": {"desired": {"on": true }}}'''
                    Type: JSON
              Condition: 'true'
              EventName: enable_alarm
          OnExit:
            Events: []
          OnInput:
            Events: []
            TransitionEvents:
            - Actions: []
              Condition: '!($input.breakIn_alarm_input.on && $input.humidity_alarm_input.on
                  && $input.temperature_alarm_input.on)'
              EventName: no_danger
              NextState: normal
          StateName: alarm


            
